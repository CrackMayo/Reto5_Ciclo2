/*
 * Pueda usar esta plantilla para la carga del reto a iMaster
 * Copie las clases de los paquetes Modelo, Vista, Controlador y Util
 * No incluya los import de los archivos .java solo las clases
 */
// Importaciones necesarias en iMaster
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Remplace en adelante por las clases de sus archivos .java

// Vista
class VistaRequerimientos {
    public static final ControladorRequerimientos controlador = new ControladorRequerimientos();

    public static void requerimiento1(){
        try {
            // Su código
            ArrayList<Requerimiento_1> result1 = controlador.consultarRequerimiento1();
            for (Requerimiento_1 persona : result1) {
                System.out.println(persona.getNombre() + " " + persona.getCargo() + " " + persona.getNumProyectos());
            }
        } catch (Exception e) {
            System.err.println(e);
        }
    }

    public static void requerimiento2(){
        try {
            // Su código
            ArrayList<Requerimiento_2> result2 = controlador.consultarRequerimiento2();
            for (Requerimiento_2 material : result2) {
                System.out.println(material.getIdMaterial() + " " + material.getNombreMaterial() + " " + material.getCantidad() + " " + material.getPrecioUnidad() + " " + material.getPrecioTotal());
            }
        } catch (Exception e) {
            System.err.println(e);
        }
    }

    public static void requerimiento3(){
        try {
            ArrayList<Requerimiento_3> result3 = controlador.consultarRequerimiento3();
            for (Requerimiento_3 proyecto : result3) {
                System.out.println(proyecto.getIdProyecto() + " " + proyecto.getCiudad() + " " + proyecto.getClasificacion() + " " + proyecto.getCostoProyecto());
            }
        } catch (Exception e) {
            System.err.println(e);
        }
    }
}

// Controlador
class ControladorRequerimientos {
    private final Requerimiento_1Dao requerimiento_1Dao;
    private final Requerimiento_2Dao requerimiento_2Dao;
    private final Requerimiento_3Dao requerimiento_3Dao;

    public ControladorRequerimientos() {
        this.requerimiento_1Dao = new Requerimiento_1Dao();
        this.requerimiento_2Dao = new Requerimiento_2Dao();
        this.requerimiento_3Dao = new Requerimiento_3Dao();
    }

    public ArrayList<Requerimiento_1> consultarRequerimiento1() throws SQLException {
        return requerimiento_1Dao.requerimiento1();
    }

    public ArrayList<Requerimiento_2> consultarRequerimiento2() throws SQLException {
        return requerimiento_2Dao.requerimiento2();
    }

    public ArrayList<Requerimiento_3> consultarRequerimiento3() throws SQLException {
        return requerimiento_3Dao.requerimiento3();
    }
}

// Modelo
// VO
class Requerimiento_1 {

    private String nombre;
    private String cargo;
    private int numProyectos;

    public Requerimiento_1() {

    }
    public Requerimiento_1(String nombre, String cargo, int numProyectos) {
        this.nombre = nombre;
        this.cargo = cargo;
        this.numProyectos = numProyectos;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getCargo() {
        return cargo;
    }

    public void setCargo(String cargo) {
        this.cargo = cargo;
    }

    public int getNumProyectos() {
        return numProyectos;
    }

    public void setNumProyectos(int numProyectos) {
        this.numProyectos = numProyectos;
    }
}

class Requerimiento_2 {
    private int idMaterial;
    private String nombreMaterial;
    private int cantidad;
    private int precioUnidad;
    private int precioTotal;

    public Requerimiento_2() {

    }

    public Requerimiento_2(int idMaterial, String nombreMaterial, int cantidad, int precioUnidad, int precioTotal) {
        this.idMaterial = idMaterial;
        this.nombreMaterial = nombreMaterial;
        this.cantidad = cantidad;
        this.precioUnidad = precioUnidad;
        this.precioTotal = precioTotal;
    }

    public int getIdMaterial() {
        return idMaterial;
    }

    public void setIdMaterial(int idMaterial) {
        this.idMaterial = idMaterial;
    }

    public String getNombreMaterial() {
        return nombreMaterial;
    }

    public void setNombreMaterial(String nombreMaterial) {
        this.nombreMaterial = nombreMaterial;
    }

    public int getCantidad() {
        return cantidad;
    }

    public void setCantidad(int cantidad) {
        this.cantidad = cantidad;
    }

    public int getPrecioUnidad() {
        return precioUnidad;
    }

    public void setPrecioUnidad(int precioUnidad) {
        this.precioUnidad = precioUnidad;
    }

    public int getPrecioTotal() {
        return precioTotal;
    }

    public void setPrecioTotal(int precioTotal) {
        this.precioTotal = precioTotal;
    }
}

class Requerimiento_3 {
     private int idProyecto;
    private String ciudad;
    private String clasificacion;
    private int costoProyecto;

    public Requerimiento_3() {

    }

    public Requerimiento_3(int idProyecto, String ciudad, String clasificacion, int costoProyecto) {
        this.idProyecto = idProyecto;
        this.ciudad = ciudad;
        this.clasificacion = clasificacion;
        this.costoProyecto = costoProyecto;
    }

    public int getIdProyecto() {
        return idProyecto;
    }

    public void setIdProyecto(int idProyecto) {
        this.idProyecto = idProyecto;
    }

    public String getCiudad() {
        return ciudad;
    }

    public void setCiudad(String ciudad) {
        this.ciudad = ciudad;
    }

    public String getClasificacion() {
        return clasificacion;
    }

    public void setClasificacion(String clasificacion) {
        this.clasificacion = clasificacion;
    }

    public int getCostoProyecto() {
        return costoProyecto;
    }

    public void setCostoProyecto(int costoProyecto) {
        this.costoProyecto = costoProyecto;
    }
}

// DAO
class Requerimiento_1Dao {
    public ArrayList<Requerimiento_1> requerimiento1() throws SQLException {
        // Su código
        ArrayList<Requerimiento_1> registrosBS = new ArrayList<>();
        Requerimiento_1 registroBS = null;

        String sql = "SELECT DISTINCT L.Nombre || ' ' || L.Primer_Apellido AS 'Lider',L.Cargo,COUNT(P.ID_Proyecto) AS 'nProyectos'"
                    +" FROM Lider AS L"
                    +" INNER JOIN Proyecto AS P ON P.ID_Lider = L.ID_Lider"
                    +" WHERE P.Constructora = 'Arquitectura S.A.'"
                    +" GROUP BY L.ID_Lider"
                    +" ORDER BY Cargo,Lider;";


                    try (
                        Connection conn = JDBCUtilities.getConnection();
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(sql);
                    ) {
                        while (rs.next()) {
                            registroBS = new Requerimiento_1();

                            registroBS.setNombre(rs.getString("Lider"));
                            registroBS.setCargo(rs.getString("Cargo"));
                            registroBS.setNumProyectos(rs.getInt("nProyectos"));
                            registrosBS.add(registroBS);
                        }
                    }

                    return registrosBS;
    }
}

class Requerimiento_2Dao {
    public ArrayList<Requerimiento_2> requerimiento2() throws SQLException {
        // Su código
        ArrayList<Requerimiento_2> registrosBS2 = new ArrayList<>();
        Requerimiento_2 registroBS2 = null;

        String sql = "SELECT MC.ID_MaterialConstruccion, MC.Nombre_Material, C.Cantidad, MC.Precio_Unidad, (C.Cantidad * MC.Precio_Unidad) AS 'Precio_Total' "
                    +"FROM Compra AS C "
                    +"INNER JOIN MaterialConstruccion AS MC ON MC.ID_MaterialConstruccion  = C.ID_MaterialConstruccion "
                    +"INNER JOIN Proyecto AS P ON P.ID_Proyecto  = C.ID_Proyecto "
                    +"WHERE P.ID_Proyecto IN (10,14,23,24,38,50,29) "
                    +"ORDER BY P.ID_Proyecto ASC, MC.Precio_Unidad DESC;";


                    try (
                        Connection conn = JDBCUtilities.getConnection();
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(sql);
                    ) {
                        while (rs.next()) {
                            registroBS2 = new Requerimiento_2();
                            registroBS2.setIdMaterial(rs.getInt("ID_MaterialConstruccion"));
                            registroBS2.setNombreMaterial(rs.getString("Nombre_Material"));
                            registroBS2.setCantidad(rs.getInt("Cantidad"));
                            registroBS2.setPrecioUnidad(rs.getInt("Precio_Unidad"));
                            registroBS2.setPrecioTotal(rs.getInt("Precio_Total"));
                            registrosBS2.add(registroBS2);
                        }
                    }
                    return registrosBS2;
    }
}

class Requerimiento_3Dao {
    public ArrayList<Requerimiento_3> requerimiento3() throws SQLException {
        // Su código
        ArrayList<Requerimiento_3> registrosBS3 = new ArrayList<>();
        Requerimiento_3 registroBS3 = null;

        String sql = "SELECT DISTINCT P.ID_Proyecto,P.Ciudad,P.Clasificacion,SUM(C.Cantidad * MC.Precio_Unidad) AS 'Costo_Proyecto'"
                    +" FROM Proyecto AS P"
                    +" INNER JOIN 	MaterialConstruccion AS MC ON MC.ID_MaterialConstruccion = C.ID_MaterialConstruccion"
                    +" INNER JOIN  Compra AS C ON C.ID_Proyecto  = P.ID_Proyecto"
                    +" WHERE P.Ciudad IN ('Monteria','Santa Marta') "
                    +" GROUP BY  P.ID_Proyecto "
                    +" HAVING SUM(C.Cantidad * MC.Precio_Unidad) > 70000 "
                    +" ORDER BY P.Ciudad ,P.Clasificacion,P.ID_Proyecto;";


                    try (
                        Connection conn = JDBCUtilities.getConnection();
                        Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(sql);
                    ) {
                        while (rs.next()) {
                            registroBS3 = new Requerimiento_3();
                            registroBS3.setIdProyecto(rs.getInt("ID_Proyecto"));
                            registroBS3.setCiudad(rs.getString("Ciudad"));
                            registroBS3.setClasificacion(rs.getString("Clasificacion"));
                            registroBS3.setCostoProyecto(rs.getInt("Costo_Proyecto"));
                            registrosBS3.add(registroBS3);
                        }
                    }

                    return registrosBS3;
    }
}